---
name: Christian Kauten
tagline: B.S., M.S., PhD, Software Engineering
email: kautenja@auburn.edu
avatar: img/avatar.png
github: Kautenja
linkedin: kautenja
googleScholar: VKojN3oAAAAJ&hl=en
cv: doc/CurriculumVitae.pdf
biography: |
  I am a software engineering and machine learning expert with extensive training across a broad range of technologies. I've worked on everything from iOS applications to machine learning systems that play video games. My current focus areas are signal processing, image processing, and applied deep learning for computer vision.
open_source_projects:
  - name: Super ADSR
    description: |
      Super ADSR is an emulation of the ADSR envelope generator from the SNES.
      <ul>
        <li><strong>Stereo Processing:</strong> Two envelope generators on one module for stereo modulation, cross modulation, or both!</li>
        <li><strong>Total Level Control:</strong> Control over the overall level of the envelope generator, including inversion for ducking effects.</li>
        <li><strong>Stage Length Control:</strong> Control over stage timings using sliders and control voltages.</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips#S-SMP-ADSR
    img: img/PotatoChips/S-SMP-ADSR-GitHub.svg
  - name: Super Echo
    description: |
      Super Echo is an emulation of the echo effect from the SNES.
      <ul>
        <li><strong>Stereo Processing:</strong> Echo buffer for two independent inputs in stereo configuration. The parameters are the same for both inputs, but the inputs have their own dedicated echo buffers.</li>
        <li><strong>Expanded Delay:</strong> The 15 levels of delay has been upgraded to 31 levels that each add an additional <em>16ms</em> of delay (up to roughly <em>500ms</em>). 31 levels of delay is able to fit in the RAM of the original S-SMP, but the instruction set does not normally support the addressing of 31 levels.</li>
        <li><strong>Feedback:</strong> Additive and subtractive feedback following the original implementation</li>
        <li><strong>Surround Effect:</strong> Stereo mixer with the ability to invert the phase of either channel resulting in odd Haas effects.</li>
        <li><strong>8-tap FIR Filter:</strong> Fully parameterized 8-tap FIR filter for shaping the sound of the echo. The filter can be parameterized as low-pass, high-pass, band-pass, band-stop, etc. and includes presets with filter parameters from popular SNES games.</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips#S-SMP-Echo
    img: img/PotatoChips/S-SMP-Echo-GitHub.svg
  - name: Super VCA
    description: |
      Super VCA is an emulation of the BRR filter and Gauss Interpolation filter from the SNES.
      <ul>
        <li><strong>Stereo Processing:</strong> Dual processing channels for stereo effects or other create multi-tracking applications.</li>
        <li><strong>4 BRR Filter Modes:</strong> 4 filter modes from the BRR sample playback engine that act as low-pass filters.</li>
        <li><strong>Gaussian Interpolation Filter:</strong> A filter that removes high-frequency content and adds subtle distortion. This filter provides the muffling character that fans of SNES audio will find familiar.</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips#S-SMP-Gauss
    img: img/PotatoChips/S-SMP-Gauss-GitHub.svg
  - name: Boss Fight
    description: |
      Boss Fight is an emulation of the Yamaha YM2612 audio processing unit. The YM2612 is a 4-operator FM synthesis chip with 6 voices of polyphony.
      <ul>
        <li><strong>16-bit:</strong> 8 bits better than the previous generation of chips!</li>
        <li><strong>6 Voice Polyphony:</strong> 6 voices of polyphony with independent V/OCT and Gate inputs</li>
        <li><strong>4-Operator FM Synthesis:</strong> Full control over the FM-synthesis parameters for each of the four operators including: envelopes, multiplier rate scale, tuning, and amplitude modulation</li>
        <li><strong>8 FM Algorithms:</strong> 8 different arrangements of the four operators</li>
        <li><strong>Stereo Outputs:</strong> Output from the left and right channels on the chip</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/BossFight.svg
  - name: Pallet Town Waves System
    description: |
      Pallet Town Waves System is an emulation of the Nintendo GameBoy Sound System (GBS) audio processing unit. The GBS is similar to the Ricoh 2A03, but replaces the triangle waveform generator with a wave-table synthesizer.
      <ul>
        <li><strong>Dual pulse wave generator:</strong> Dual 8-bit pulse waves with four duty cycles: <em>12.5%</em>, <em>25%</em>, <em>50%</em>, and <em>75%</em></li>
        <li><strong>Wave-table synthesis channel:</strong> wave-table synthesis with bit depth of 4 bits and table size of 32 samples. 5 pages of wave-tables can be interpolated between using CV</li>
        <li><strong>Noise generator:</strong> generate pseudo-random numbers at 7 different frequencies</li>
        <li><strong>Linear Feedback Shift Register (LFSR):</strong> old-school 8-bit randomness!</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/PalletTownWavesSystem.svg
  - name: Pot Keys
    description: |
      Pot Keys is an emulation of the Atari POKEY audio processing unit. The POKEY produces four pulse waveforms, but contains a variety of bonus controls, including extended frequency ranges, high-pass filters, and noise generators / distortion effects.
      <ul>
        <li><strong>Quad pulse wave generator:</strong> Four pulse waves with 8-bit frequency value and <em>50%</em> pulse width</li>
        <li><strong>Low-frequency mode:</strong> Change base clock of the chip from <em>64 KHz</em> to <em>15 KHz</em></li>
        <li><strong>High-frequency mode:</strong> Change base clock of channels 1 and 3 from <em>64 KHz</em> to <em>1.79 MHz</em></li>
        <li><strong>High-pass filter:</strong> High-pass filter channel 1 using channel 3 as a clock or high-pass channel 2 using channel 4 as a clock</li>
        <li><strong>Linear Feedback Shift Register (LFSR):</strong> old-school 8-bit randomness!</li>
        <li><strong>Noise/Distortion generator:</strong> generate per-channel pseudo-random numbers at 15 different frequencies as a distortion source</li>
        <li><strong>Amplitude modulation:</strong> 4-bit amplifier with linear amplitude modulation</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/PotKeys.svg
  - name: Jairasullator
    description: |
      Jairasullator is an emulation of the General Instrument AY-3-8910 audio processing unit. The AY-3-8910 features three pulse waveform generators and a noise generator that is shared between the channels.
      <ul>
        <li><strong>Triple pulse wave generator:</strong> Triple 12-bit pulse waves with duty cycle of <em>50%</em></li>
        <li><strong>Amplitude modulation:</strong> Manual and CV control over the individual voice levels</li>
        <li><strong>White noise:</strong> Generate noise using the frequency knob for channel 3</li>
        <li><strong>Tone/Noise control:</strong> CV and switch to control tone and noise for each channel</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/Jairasullator.svg
  - name: Mega Tone
    description: |
      A Eurorack module for VCV Rack based on the Texas Instruments SN76489 featuring:
      <ul>
        <li><strong>Triple pulse wave generator:</strong> Triple 8-bit pulse waves with <em>50%</em> duty cycle and 10-bit frequency parameter</li>
        <li><strong>Noise generator:</strong> Generate either white-noise or periodic noise at one of four shift rates: <em>N/512</em>, <em>N/1024</em>, <em>N/2048</em>, or the output of tone generator 3</li>
        <li><strong>4-bit Level Control:</strong> 4-bit level control over each channel with mixer sliders and CV inputs</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/MegaTone.svg
  - name: Name Corp Octal Wave Generator
    description: |
      A Eurorack module for VCV Rack based on the Namco 106 featuring:
      <ul>
        <li><b>Wave-table synthesis:</b> 8 channels of wave-table synthesis with bit depth of 4 bits and table size of 32 samples</li>
        <li><b>Waveform morph:</b> 5 banks of wave-tables to morph between using 32-bit floating point linear interpolation</li>
        <li><b>Frequency control:</b> 18-bit frequency control with linear frequency modulation</li>
        <li><b>Amplitude modulation:</b> 4-bit amplifier with linear amplitude modulation</li>
        <li><b>Namco 106 compute limitation:</b> activating each additional channel reduces the amount of compute available for all channels. This causes all channels to drop in frequency when additional channels are activated.</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/NameCorpOctalWaveGenerator.svg
  - name: Pulses
    description: |
      Pulses is an emulation of the Sunsoft FME7 audio processing unit from the Nintendo Entertainment System (NES) for VCV Rack. The FME7 chip contains three pulse wave generators, a noise generator, and an envelope generator. Only the pulse wave generators are implemented currently.
      <ul>
        <li><strong>Triple pulse wave generator:</strong> Triple 12-bit pulse waves with duty cycle of <em>50%</em></li>
        <li><strong>Amplitude modulation:</strong> Manual and CV control over the individual voice levels</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/Pulses.svg
  - name: Step Saw
    description: |
      Step Saw is an emulation of the Konami VRC6 audio processing unit from the Nintendo Entertainment System (NES) for VCV Rack. The VRC6 chip contains two pulse wave generators, and a quantized saw wave generator.
      <ul>
        <li><strong>Dual pulse wave generator:</strong> Dual 8-bit pulse waves with eight duty cycles: <em>6.25%</em>, <em>12.5%</em>, <em>18.75%</em>, <em>25%</em>, <em>31.25%</em>, <em>37.5%</em>, <em>43.75%</em>, and <em>50%</em></li>
        <li><strong>Quantized saw wave generator:</strong> Generate NES style saw wave with variable quantization including the overflow bug in the VRC6</li>
        <li><strong>Amplitude modulation:</strong> Manual and CV control over the individual voice levels</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/StepSaw.svg
  - name: Infinite Stairs
    description: |
      Infinite Stairs is an emulation of the Ricoh 2A03 audio processing unit from the Nintendo Entertainment System (NES) for VCV Rack. The 2A03 chip contains two pulse wave generators, a quantized triangle wave generator, and a noise generator. The original chip featured a DMC loader for playing samples that has been omitted in this emulation.
      <ul>
        <li><strong>Dual pulse wave generator:</strong> Dual 8-bit pulse waves with four duty cycles: <em>12.5%</em>, <em>25%</em>, <em>50%</em>, and <em>75%</em></li>
        <li><strong>Quantized triangle wave generator:</strong> Generate NES style triangle wave with 16 steps of quantization</li>
        <li><strong>Noise generator:</strong> generate pseudo-random numbers at 16 different frequencies</li>
        <li><strong>Linear Feedback Shift Register (LFSR):</strong> old-school 8-bit randomness!</li>
      </ul>
    url: https://github.com/Kautenja/PotatoChips
    img: img/PotatoChips/InfiniteStairs.svg
  - name: RackNES
    description: |
      An NES emulator with Control Voltage (CV) for <a href="https://vcvrack.com">VCV Rack</a> with many features:
      <ul>
        <li><b>Clock Source:</b> Use NES as a clock source for downstream modules</li>
        <li><b>Clock Rate Modulation:</b> Control the clock rate of the NES with direct knob and CV</li>
        <li><b>NES Audio Output:</b> Sample audio from the NES in real-time at any sampling rate</li>
        <li><b>Sampling/Ratcheting:</b> Save and restore the NES state for interesting musical effects</li>
        <li><b>Full CV Control:</b> CV inputs for Reset, Player 1, Player 2, and more</li>
      </ul>
    url: https://github.com/Kautenja/RackNES
    img: img/RackNES.svg
  - name: Limit Order Book
    description: |
      An C++ implementation of the limit order book for following an order depth
      data feed from a financial markets. A Python API is also provided using
      CTypes.
    url: https://github.com/Kautenja/limit-order-book
    img: img/lob.jpg
  - name: Robust Graph Convolutional Networks Against Adversarial Attacks (Implementation)
    description: |
      A Keras implementation of the <i>Robust Graph Convolutional Network</i>,
      i.e., the Gaussian Graph Convolutional Layer with attention mechanism.
    url: https://github.com/Kautenja/robust-graph-convolutional-networks-against-adversarial-attacks-implementation
    img: img/ggcn.png
  - name: C++ Object Pool Template
    description: |
      A C++ header-only template implementation of the object pool pattern for
      object reuse. The code is tested and benchmarked using
      <a href="https://github.com/catchorg/Catch2">Catch2</a>.
      </br>
      <i>
      image courtesy of
      <a href="https://twitter.com/mikegeig/status/453239221885480960">Mike Geig</a>
      </i>
    url: https://github.com/Kautenja/object-pool
    img: img/object-pool.png
  - name: NES iOS
    description: |
      An NES emulator for iOS based on the C++ back-end from the
      <a href="https://github.com/Kautenja/nes-py">NESpy</a> emulator. Sadly,
      Apple forbids arbitrary code execution so this app can't be published.
    url: https://github.com/Kautenja/nes-iOS
    img: img/nes-iOS.png
  - name: Gym Tetris
    description: |
      An Open.ai Gym environment for the classic Nintendo Entertainment System
      (NES) game, Tetris, based on the
      <a href="https://github.com/Kautenja/nes-py">NESpy</a> emulator.
    url: https://github.com/Kautenja/gym-tetris
    img: img/tetris.png
  - name: Gym Zelda 1
    description: |
      An Open.ai Gym environment for the classic Nintendo Entertainment System
      (NES) game, The Legend of Zelda, based on the
      <a href="https://github.com/Kautenja/nes-py">NESpy</a> emulator.
    url: https://github.com/Kautenja/gym-zelda-1
    img: img/zelda1.png
  - name: Pyramid Pooling Module (Implementation)
    description: |
      A Keras implementation of the <i>Pyramid Pooling Module</i> used in the
      <a href="https://hszhao.github.io/projects/pspnet/">PSPNet</a>
      architecture.
    url: https://github.com/Kautenja/keras-pyramid-pooling-module
    img: img/ppm.png
  - name: Very Good Semantic Segmentation Labeling App
    description: |
      A python application for labeling semantic segmentation datasets. The app
      features superpixels, custom label mapping support, and loading existing
      segmentations.
    url: https://github.com/Kautenja/semantic-segmentation-labeling-app
    img: img/vgssla.jpg
  - name: Semantic Segmentation Baselines
    description: |
      Implementations of neural semantic segmentation models in Python using
      Keras and TensorFlow. Implemented models include:
      <ul>
        <li>ENet</li>
        <li>ICNet</li>
        <li>SegNet</li>
        <li>Tiramisu</li>
      </ul>
      Datasets include:
      <ul>
        <li>CamVid</li>
        <li>City Scapes</li>
        <li>Berkeley Diverse Driving</li>
        <li>Mapillary</li>
      </ul>
    url: https://github.com/Kautenja/semantic-segmentation-baselines
    img: img/nss.png
  - name: Gym Super Mario Bros.
    description: |
      An Open.ai Gym environment for the classic Nintendo Entertainment System
      (NES) game, Super Mario Bros., based on the
      <a href="https://github.com/Kautenja/nes-py">NESpy</a> emulator.
    url: https://github.com/Kautenja/gym-super-mario-bros
    img: img/smb.jpg
  - name: NESpy
    description: |
      A Nintendo Entertainment System (NES) emulator for Python based on the
      <a href="https://github.com/amhndu/SimpleNES">SimpleNES</a> emulator
      written in C++.
    url: https://github.com/Kautenja/nes-py
    img: img/nes-py.png
  - name: Playing Super Mario Bros. with Deep Reinforcement Learning
    description: |
      An implementation of Dueling, Double, Deep Q learning to play Super Mario
      Bros. with high proficiency. Built using
      <a href="https://github.com/Kautenja/gym-super-mario-bros">Gym Super
      Mario Bros.</a>
    url: https://github.com/Kautenja/playing-mario-with-deep-reinforcement-learning
    vid: img/DDQN-SMB-1-4.mp4
  - name: A Neural Algorithm of Artistic Style (Implementation)
    description: |
      An implementation of the paper
      <i><a href="https://arxiv.org/abs/1508.06576">A Neural Algorithm of
      Artistic Style</a></i> in Python using Keras and TensorFlow. Includes
      modules for content reconstruction, content layer selection, style
      reconstruction, style layer selection, style transfer, and photo-realistic
      style transfer.
    url: https://github.com/Kautenja/a-neural-algorithm-of-artistic-style
    img: img/anaoas.jpg
publications:
  # - title: Predicting Blood Donors Using Machine Learning Techniques
  #   authors: Christian Kauten, Ashish Gupta, Xiao Qin, Glenn Richey
  #   year: 2021
  #   venue: Information Systems Frontiers
  #   description: |
  #     The United States' blood supply chain is experiencing market decline due to recent innovations in surgical practice, transfusion management, and hospital policy. These innovations strain US blood centers, resulting in cuts to surge capacities, consolidation, and reduced funding for research and outreach programs. In this study, we use data from a regional blood center to explore the application of contemporary machine learning algorithms for modeling donor retention. Such predictive models of donor retention can be used to design more cost effective donor outreach programs. Using data from a large US blood center paired with random forest classifiers, we are able to build a model of donor retention with a Mathews correlation of coefficient of 0.851.
  #   bib: doc/predicting-blood-donors.bib
  #   pdf: doc/predicting-blood-donors.pdf
  # - title: Understanding Time and related threats in the Financial Service Sector
  #   authors: Jonathon Lee and Christian Kauten and Ashish Gupta and Andrew Bach
  #   year: 2020
  #   venue: U.S. Department of The Treasury
  #   description: ''
  #   bib: doc/time-and-related-threats-in-fss.bib
  #   pdf: doc/time-and-related-threats-in-fss.pdf
  - title: Detecting Fake News for Reducing Misinformation Risks Using Analytics Approaches
    authors: Chaowei Zhang, Ashish Gupta, Christian Kauten, Amit V. Deokar, Xiao Qin
    year: 2019
    venue: European Journal of Operational Research
    description: |
      Fake news is playing an increasingly dominant role in spreading misinformation by influencing people’s perceptions or knowledge to distort their awareness and decision-making. The growth of social media and online forums has spurred the spread of fake news causing it to easily blend with truthful information. This study provides a novel text analytics–driven approach to fake news detection for reducing the risks posed by fake news consumption. We first describe the framework for the proposed approach and the underlying analytical model including the implementation details and validation based on a corpus of news data. We collect legitimate and fake news, which is transformed from a document based corpus into a topic and event–based representation. Fake news detection is performed using a two-layered approach, which is comprised of detecting fake topics and fake events. The efficacy of the proposed approach is demonstrated through the implementation and validation of a novel FakE News Detection (FEND) system. The proposed approach achieves 92.49% classification accuracy and 94.16% recall based on the specified threshold value of 0.6.
    bib: doc/fend.bib
    pdf: doc/fend.pdf
  - title: A Perception Augmentation System for Autonomous Vehicles
    authors: Christian Kauten, Ashish Gupta, Xiao Qin, Han Li, David Bevly and Alison Jenkins
    year: 2018
    venue: Pre-ICIS SIGDSA Symposium
    description: |
      We describe a system prototype for perception augmentation in autonomous vehicles. The system is built using a fully convolutional deep encoder-decoder architecture to map pixels with depth measures to semantic class labels. Class labels recombine with depth measures to produce a 3-dimensional semantic map of the objects in front of the vehicle. The map, simplified to highlight areas of importance (e.g., other vehicles, pedestrians), is shown to the passenger using a novel user interface. The map is also analyzed for potential risks to queue alerts to the passenger. Alerts are both: (1) shown to the passenger using an addressable LED strip around the windshield, and (2) delivered to the passenger through a speaker.
    bib: doc/pa-av-prototype.bib
    pdf: doc/pa-av-prototype.pdf
  - title: "REDUX: Managing Renewable Energy in Data Centers using Distributed UPS Systems"
    authors: Xiaopu Peng, Christian Kauten, Thomas Heckwolf, Chaowei Zhang, Jianzhou Mao and Xiao Qin
    year: 2018
    venue: IEEE International Conference on Smart Cloud
    description: |
      To environmental friendly and energy-efficient data centers, it is prudent to leverage on-site renewable sources like solar and wind. Distributed UPS systems are deployed in data centers to handle the intermittency feature of renewable energy. We propose a renewable-energy manager called REDUX, which offers a smart way of managing server energy consumption powered by a distributed UPS system and renewable energy. REDUX maintains a desirable balance between renewable-energy utilization and data center performance. REDUX makes judicious use of UPS devices to allocate energy resources when renewable energy generation is low or fluctuating condition. REDUX not only guarantees the stable operation of daily workload but also reduces the energy cost of data centers by improving power resource utilization. Compared with existing strategies, REDUX demonstrates a prominent capability of mitigating average peak workload and boosting renewable-energy utilization.
    bib: doc/redux.bib
    pdf: doc/redux.pdf
